{"mappings":"AC4BA;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AC4DA;;;;;;;;;;;AAUE;;;;;;AAKA;;;;;AAIF;;;;;;AAOE;;;;;;;;;AC3CF;;;;;;;;;AAOA;;;;;;AAYA;;;;;;;AAQA;;;;;;;AAME;;;;;;;;ACrDF;;;;;AAIA;;;;;;AAKA;;;;;AAMA;;;;AAGA;;;;;ACRA;;;;;;;;;;;;ACaA;;;;;;;;;;;;;;AAcA;;;;;;AAOA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;AClDA;;;;;;;;;;;;;;AAcA;;;;;;AAOA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;AC8BA;;;;;;;;;;;;;;AAcA;;;;;;AAOA;;;;;;;;;AAUA;;;;;;;;;AAQA;;;;;;;;;AAQE;;;;;AAMF;;;;AC1GA;;;;;;;;;;AASE;;;;;;;AAMA;;;;;;;;;AAQA;;;;;;;;;;AAQF;;;;;;ACxFA","sources":["c8aa696ec41b5a0e","src/components/Button.vue","src/components/Automation.vue","src/views/HomeView.vue","src/components/MaintainerList.vue","src/views/MaintainersView.vue","src/views/AddBoardView.vue","src/views/NewMaintainerView.vue","src/views/EditBoardView.vue","src/components/Issue.vue","src/views/IssuesView.vue"],"sourcesContent":["@import \"9f60151b50326e1b\";\n@import \"de928247e6d3c973\";\n@import \"6b6cc4a4c869e594\";\n@import \"7a560ed7920f4649\";\n@import \"680dab46eda3a4c3\";\n@import \"ac3c496e162eb4a7\";\n@import \"009c22b3bec9d6f2\";\n@import \"2bf25cebdc2f8cc4\";\n@import \"0eaee25679136f19\";\n@import \"9f7fa44cffe73ecb\";\n@import \"2d16675b670496e0\";\n@import \"0db471a9e99fba24\";\n","\n<script setup>\n  defineProps({\n    text: String\n  })\n</script>\n\n<template>\n\n  <button class=\"button\" @click=\"$emit('goToLink')\">{{text}}</button>\n\n</template>\n\n<script>\n\nexport default {\n\n  emits: ['goToLink'],\n\n  data() {\n    return {\n    }\n  },\n}\n\n</script>\n\n<style>\n.button {\n  display: inline-block;\n  padding: 10px 20px;\n  font-size: 16px;\n  text-align: center;\n  text-decoration: none;\n  cursor: pointer;\n  border: 2px solid #3498db;\n  border-radius: 5px;\n  color: #3498db;\n  background-color: #fff;\n  transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\n.button:hover {\n  background-color: #3498db;\n  color: #fff;\n}\n\n.button:active {\n  border-color: #2980b9;\n  background-color: #2980b9;\n  color: #fff;\n}\n\n</style>\n","\n<script setup>\n  import Button from \"./Button.vue\";\n\n  defineProps({\n    details: Object,\n    active: Boolean,\n  });\n\n</script>\n\n<template>\n\n  <div v-if=\"active\" class=\"automation\">\n    <h3>{{details.name}}</h3>\n\n    <Button class=\"edit-button\" text=\"Edit\" @go-to-link=\"() => editAutomation(details)\"/>\n\n    <div class=\"p-container\">\n      <p>Monday ID: {{details.mondayId}}</p>\n      <p>Last Updated Column ID: {{details.updateColId}}</p>\n\n      <Button class=\"toggle-button\" text=\"Deactivate\" @go-to-link=\"() => deactivateAutomation(details)\"/>\n\n      <p>Ally Semester ID: {{details.allySemId}}</p>\n      <p>End Date: {{details.endDate}}</p>\n      <p>Last Updated: {{new Date(details.lastUpdated).toLocaleDateString()}} {{new Date(details.lastUpdated).toLocaleTimeString()}}</p>\n    </div>\n\n    <div class=\"trigger-now-button-box\">\n      <Button v-if=\"updateText === 'Trigger Update Now'\" :text=\"updateText\" @go-to-link=\"() => manuallyTrigger(details)\"/>\n      <p v-else>{{updateText}}</p>\n    </div>\n\n  </div>\n\n  <div v-else class=\"automation\">\n    <h3>{{details.name}}</h3>\n\n    <Button class=\"edit-button\" text=\"Edit\" @go-to-link=\"() => editAutomation(details)\"/>\n\n    <div class=\"p-container\">\n      <p>Monday ID: {{details.mondayId}}</p>\n      <p>Last Update: {{details.lastUpdated}}</p>\n\n      <Button class=\"toggle-button\" text=\"Activate\" @go-to-link=\"() => activateAutomation(details)\"/>\n\n    </div>\n\n  </div>\n\n</template>\n\n\n<script>\nimport {SERVER_URL, postData} from \"../constants.js\";\n\nexport default {\n\n  props: ['details', 'active'],\n  emits: ['refresh'],\n\n  data() {\n    return {\n      updateText: 'Trigger Update Now',\n    }\n  },\n\n  methods: {\n\n    async activateAutomation(item) {\n      console.log(`Activating ${item.name}`);\n      const result = await postData(`${SERVER_URL}activate-board`, {id: item.mondayId});\n      console.log(result);\n      this.$emit(\"refresh\");\n    },\n\n    async deactivateAutomation(item) {\n      console.log(`Deactivating ${item.name}`);\n      const result = await postData(`${SERVER_URL}deactivate-board`, {id: item.mondayId});\n      console.log(result);\n      this.$emit(\"refresh\");\n    },\n\n    editAutomation(info) {\n      console.log(\"Editing an automation\");\n      this.$router.push({path: '/edit', query: {item: JSON.stringify(info)}});\n    },\n\n    async manuallyTrigger(info) {\n      const result = await postData(`${SERVER_URL}update-now`, {id: info.mondayId});\n      console.log(result);\n      this.updateText = \"Update initiated!\"\n    },\n  },\n\n}\n</script>\n\n\n<style>\n\n.trigger-now-button-box {\n  text-align: center;\n  padding: 10px;\n}\n\n.automation {\n  background-color: #EEF5FF; /* Background color */\n  color: black; /* Text color */\n  border: 2px solid #3498db; /* Border color and thickness */\n  border-radius: 10px; /* Rounded corners */\n  padding: 20px; /* Padding for content inside the element */\n  margin: 10px; /* Margin to create an offset background effect */\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.1); /* Box shadow for depth */\n  position: relative;\n}\n\n.edit-button {\n  position: absolute;\n  top: 15px; /* Adjust the top distance as needed */\n  right: 15px; /* Adjust the right distance as needed */\n}\n\n.toggle-button {\n  width: 150px;\n  height: 45px;\n}\n\n.p-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* Three columns */\n  gap: 0; /* Adjust the gap between paragraphs as needed */\n}\n\n/* Style for each paragraph */\n.p-container p {\n  border-radius: 5px;\n  font-size: 14pt;\n}\n\nh3 {\n  font-size: 30pt;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n\n</style>\n","<template>\n  <div class=\"two-buttons\">\n    <Button text=\"Manage Maintainers\" @goToLink=\"goToMaintainers\" />\n    <p></p>\n    <Button text=\"View Errors / Issues\" @goToLink=\"goToIssues\" />\n  </div>\n\n  <Button class=\"add-button\" text=\"Add New Board\" @goToLink=\"goToAddBoard\" />\n\n  <h1>QA Update</h1>\n\n  <div class=\"center-link\">\n    <a\n      href=\"https://github.com/emmalynnnn/cidi-monday-qa-automation\"\n      target=\"_blank\"\n      class=\"link\"\n      >About</a\n    >\n  </div>\n\n  <div v-if=\"!automations || automations.length === 0\">\n    <p>Loading...</p>\n  </div>\n\n  <div v-else>\n    <h2>Active Automations - Updates Nightly at {{ time }}</h2>\n    <AutomationsList\n      :active=\"true\"\n      :automations=\"automations\"\n      v-on:refresh=\"refreshBoards\"\n    />\n    <h2>Inactive Automations</h2>\n    <AutomationsList\n      :active=\"false\"\n      :automations=\"automations\"\n      v-on:refresh=\"refreshBoards\"\n    />\n  </div>\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport AutomationsList from \"../components/AutomationsList.vue\";\nimport { SERVER_URL } from \"../constants.js\";\n\nexport default {\n  components: {\n    AutomationsList,\n    Button,\n  },\n\n  data() {\n    return {\n      time: \"8:00 PM\",\n      automations: [],\n    };\n  },\n\n  methods: {\n    goToMaintainers() {\n      this.$router.push({ path: \"/maintainers\" });\n    },\n\n    goToAddBoard() {\n      this.$router.push({ path: \"/add\" });\n    },\n\n    goToIssues() {\n      this.$router.push({ path: \"/issues\" });\n    },\n\n    async refreshBoards(newAutomations = null) {\n      if (newAutomations) {\n        this.automations = newAutomations;\n      } else {\n        const resp = await fetch(`${SERVER_URL}get-boards`);\n        this.automations = await resp.json();\n      }\n    },\n  },\n\n  async created() {\n    this.refreshBoards();\n  },\n};\n</script>\n\n<style>\nh1 {\n  text-align: center;\n  font-size: 40pt;\n}\n\nh2 {\n  text-align: center;\n}\n\n.two-buttons {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  left: 20px; /* Adjust the right distance as needed */\n}\n\n.add-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  right: 20px; /* Adjust the right distance as needed */\n}\n\n/* Styles to center a link */\n.center-link {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n/* Additional styling for the link (optional) */\n.center-link a {\n  font-size: 20px;\n  color: #3498db;\n  border-radius: 5px;\n  transition: background-color 0.3s, color 0.3s, border-color 0.3s;\n}\n\n.center-link a:hover {\n  color: #0367a8;\n}\n</style>\n","<script setup>\n\ndefineProps({\n  maintainers: Array,\n  primaryMaintainer: Number,\n});\n</script>\n\n<template>\n\n  <ul v-for=\"item in maintainers\" class=\"maintainer\">\n    <div style=\"display: flex; justify-content: space-around;\">\n      <li>\n        <span class=\"list-text\">{{formatMaintainer(item)}}&nbsp;&nbsp;&nbsp;</span>\n        <span class=\"remove\" @click=\"() => editMaintainer(item)\">Remove?</span>\n      </li>\n    </div>\n  </ul>\n\n</template>\n\n\n<script>\nimport Button from \"./Button.vue\";\n\nexport default {\n\n  emits: ['remove'],\n\n  components: {\n    Button,\n  },\n\n  data() {\n    return {\n      theMaintainers: [],\n    }\n  },\n\n  created() {\n  },\n\n  methods: {\n    formatMaintainer(item) {\n      let text = `${item.name}: ${item.email}`;\n      if (item.id === this.primaryMaintainer) {\n        text += ' (primary maintainer)';\n      }\n      return text;\n    },\n\n    editMaintainer(item) {\n      if (confirm(`Are you sure you want to remove ${item.name} as a maintainer?`)) {\n        console.log(`Removing ${item.name}`);\n        this.$emit(\"remove\", item);\n      }\n    },\n\n\n  }\n}\n</script>\n\n\n<style>\n\n\n\n.maintainer {\n  position: relative;\n}\n\nul {\n  list-style-type: none; /* Remove default list-style */\n  padding: 0; /* Remove default padding */\n}\n\nli {\n  padding: 8px 0; /* Add padding to each list item for spacing */\n  border-bottom: 1px solid #ddd; /* Add a border between list items */\n  display: inline-block;\n}\n\n.list-text {\n  flex: 1; /* Make the text take up available space */\n  margin-right: 0; /* Remove margin between text and button */\n}\n\n/* Style the last list item to remove the bottom border */\nli:last-child {\n  border-bottom: none;\n}\n\n.remove {\n  text-decoration: underline;\n  color: brown;\n}\n\n</style>\n","<template>\n  <h1>Maintainers</h1>\n  <Button class=\"maintainer-button\" text=\"Home\" @goToLink=\"leaveMaintainers\" />\n\n  <MaintainerList\n    :maintainers=\"maintainers\"\n    :primaryMaintainer=\"primaryMaintainer\"\n    v-on:remove=\"removeMaintainer\"\n  />\n\n  <Button class=\"add-button\" text=\"Add New Maintainer\" @goToLink=\"addNew\" />\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport MaintainerList from \"../components/MaintainerList.vue\";\nimport { SERVER_URL, postData } from \"../constants.js\";\n\nexport default {\n  components: {\n    MaintainerList,\n    Button,\n  },\n\n  data() {\n    return {\n      maintainers: [],\n      primaryMaintainer: null,\n    };\n  },\n\n  created() {\n    this.refreshMaintainers();\n  },\n\n  methods: {\n    leaveMaintainers() {\n      this.$router.push({ path: \"/\" });\n    },\n\n    addNew() {\n      this.$router.push({ path: \"/maintainers/add\" });\n    },\n\n    async removeMaintainer(item) {\n      console.log(`Removing ${item.name} from the server & database`);\n\n      const result = await postData(`${SERVER_URL}delete-maintainer`, item);\n      console.log(result);\n\n      if (result.result === \"success\") {\n        await this.refreshMaintainers();\n      } else {\n        alert(`Deletion failed: ${result.result}`);\n      }\n    },\n\n    async refreshMaintainers(newMaintainers = null) {\n      if (newMaintainers) {\n        this.maintainers = newMaintainers;\n      } else {\n        const resp = await fetch(`${SERVER_URL}get-maintainers`);\n        const body = await resp.json();\n        console.log(body);\n\n        const respPrimary = await fetch(`${SERVER_URL}get-primary-maintainer`);\n        const bodyPrimary = await respPrimary.json();\n        console.log(bodyPrimary);\n\n        this.primaryMaintainer = bodyPrimary;\n        this.maintainers = body;\n      }\n    },\n  },\n};\n</script>\n\n<style>\n.maintainer-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  left: 20px; /* Adjust the right distance as needed */\n}\n\n.add-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  right: 20px; /* Adjust the right distance as needed */\n}\n</style>\n","<template>\n  <Button class=\"back-button\" text=\"Home\" @goToLink=\"goBack\" />\n  <h1>Add Board</h1>\n  <br />\n\n  <div>\n    <form @submit.prevent=\"addUser\">\n      <div>\n        <label>Board Name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"board.name\" required />\n      </div>\n      <div>\n        <label>Monday.com ID:</label>\n        <input type=\"text\" id=\"mondayID\" v-model=\"board.mondayID\" required />\n      </div>\n      <div>\n        <label>Last Updated Column ID:</label>\n        <input\n          type=\"text\"\n          id=\"updateCol\"\n          v-model=\"board.updateColID\"\n          required\n        />\n      </div>\n      <div>\n        <label>Ally Semester ID:</label>\n        <input type=\"text\" id=\"allyID\" v-model=\"board.allyID\" required />\n      </div>\n      <div>\n        <label>End Date (optional):</label>\n        <input type=\"text\" id=\"allyID\" v-model=\"board.endDate\" />\n      </div>\n      <button class=\"submit-button\" type=\"submit\">Add Board</button>\n\n      <p>{{ message }}</p>\n    </form>\n  </div>\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport { SERVER_URL, postData } from \"../constants.js\";\n\nexport default {\n  components: {\n    Button,\n  },\n\n  data() {\n    return {\n      board: {\n        name: \"\",\n        mondayID: \"\",\n        updateColID: \"\",\n        allyID: \"\",\n        endDate: \"\",\n      },\n      message: \"\",\n    };\n  },\n\n  methods: {\n    goBack() {\n      this.$router.push({ path: \"/\" });\n    },\n\n    async addUser() {\n      console.log(`Adding new board to server: ${JSON.stringify(this.board)}`);\n\n      const result = await postData(`${SERVER_URL}add-board`, this.board);\n      console.log(result);\n\n      if (result.result === \"success\") {\n        this.message = \"Added!\";\n\n        this.board = {\n          name: \"\",\n          mondayID: \"\",\n          updateColID: \"\",\n          allyID: \"\",\n          endDate: \"\",\n        };\n      } else {\n        this.message = `Failed: ${JSON.stringify(result.result)}`;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.back-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  left: 20px; /* Adjust the right distance as needed */\n}\n\nform {\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f4f4f4;\n  border-radius: 8px;\n}\n\n/* Style form labels */\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n}\n\n/* Style form inputs */\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n/* Style the submit button */\n.submit-button {\n  background-color: #3498db;\n  color: #fff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n/* Style the submit button on hover */\n.submit-button:hover {\n  background-color: #267bb5;\n}\n</style>\n","<template>\n  <Button class=\"back-button\" text=\"Back\" @goToLink=\"goBack\" />\n  <h1>Add Maintainer</h1>\n  <br />\n\n  <div>\n    <form @submit.prevent=\"addUser\">\n      <div>\n        <label>Name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"maintainer.name\" required />\n      </div>\n      <div>\n        <label>Email:</label>\n        <input type=\"email\" id=\"mondayID\" v-model=\"maintainer.email\" required />\n      </div>\n      <div>\n        <label for=\"checkbox\"\n          >Primary Maintainer? (Note: setting this maintainer as the primary\n          will replace the current primary maintainer)</label\n        >\n        <input type=\"checkbox\" id=\"checkbox\" v-model=\"maintainer.primary\" />\n      </div>\n      <button class=\"submit-button\" type=\"submit\">Add Maintainer</button>\n\n      <p>{{ message }}</p>\n    </form>\n  </div>\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport { SERVER_URL, postData } from \"../constants.js\";\n\nexport default {\n  components: {\n    Button,\n  },\n\n  data() {\n    return {\n      maintainer: {\n        name: \"\",\n        email: \"\",\n        primary: false,\n      },\n      message: \"\",\n    };\n  },\n\n  methods: {\n    goBack() {\n      this.$router.push({ path: \"/maintainers\" });\n    },\n\n    async addUser() {\n      console.log(\n        `Adding new maintainer on server: ${JSON.stringify(this.maintainer)}`\n      );\n\n      const result = await postData(\n        `${SERVER_URL}add-maintainer`,\n        this.maintainer\n      );\n      console.log(result);\n\n      if (result.result === \"success\") {\n        this.message = \"Added!\";\n\n        this.maintainer = {\n          name: \"\",\n          email: \"\",\n          primary: false,\n        };\n      } else {\n        this.message = `Failed: ${JSON.stringify(result.result)}`;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.back-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  left: 20px; /* Adjust the right distance as needed */\n}\n\nform {\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f4f4f4;\n  border-radius: 8px;\n}\n\n/* Style form labels */\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n}\n\n/* Style form inputs */\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n/* Style the submit button */\n.submit-button {\n  background-color: #3498db;\n  color: #fff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n/* Style the submit button on hover */\n.submit-button:hover {\n  background-color: #267bb5;\n}\n</style>\n","<template>\n  <Button class=\"back-button\" text=\"Home\" @goToLink=\"goBack\" />\n  <h1>Edit Board</h1>\n  <br />\n\n  <div>\n    <form @submit.prevent=\"addUser\">\n      <div>\n        <label>Board Name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"board.name\" required />\n      </div>\n      <div>\n        <label>Monday.com ID:</label>\n        <input type=\"text\" id=\"mondayID\" v-model=\"board.mondayID\" disabled />\n      </div>\n      <div>\n        <label>Last Updated Column ID:</label>\n        <input\n          type=\"text\"\n          id=\"updateCol\"\n          v-model=\"board.updateColID\"\n          required\n        />\n      </div>\n      <div>\n        <label>Ally Semester ID:</label>\n        <input type=\"text\" id=\"allyID\" v-model=\"board.allyID\" required />\n      </div>\n      <div>\n        <label>End Date (optional):</label>\n        <input type=\"text\" id=\"allyID\" v-model=\"board.endDate\" />\n      </div>\n      <button class=\"submit-button\" type=\"submit\">Update Board</button>\n\n      <p>{{ message }}</p>\n    </form>\n\n    <div class=\"right\">\n      <button class=\"delete-button\" @click=\"deleteBoard\">Delete Board</button>\n      <p>{{ deleteMessage }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport { SERVER_URL } from \"../constants.js\";\n\nexport default {\n  components: {\n    Button,\n  },\n\n  data() {\n    return {\n      board: {\n        name: \"\",\n        mondayID: \"\",\n        updateColID: \"\",\n        allyID: \"\",\n        endDate: \"\",\n      },\n      message: \"\",\n      deleteMessage: \"\",\n    };\n  },\n\n  created() {\n    const item = JSON.parse(this.$route.query.item);\n    console.log(item);\n    this.board = {\n      name: item.name,\n      mondayID: item.mondayId,\n      updateColID: item.updateColId,\n      allyID: item.allySemId,\n      endDate: item.endDate,\n    };\n  },\n\n  methods: {\n    goBack() {\n      this.$router.push({ path: \"/\" });\n    },\n\n    async addUser() {\n      console.log(`Updating board on server: ${JSON.stringify(this.board)}`);\n\n      const result = await this.postData(`${SERVER_URL}edit-board`, this.board);\n      console.log(result);\n\n      if (result.result === \"success\") {\n        this.message = \"Updated!\";\n      } else {\n        this.message = `Failed: ${JSON.stringify(result.result)}`;\n      }\n    },\n\n    async deleteBoard() {\n      if (\n        confirm(\n          `Are you sure you want to delete ${this.board.name}? All data will be lost and all future updates will be cancelled.`\n        )\n      ) {\n        console.log(`Deleting board on server: ${JSON.stringify(this.board)}`);\n\n        const result = await this.postData(\n          `${SERVER_URL}delete-board`,\n          this.board\n        );\n        console.log(result);\n\n        if (result.result === \"success\") {\n          this.deleteMessage = \"Deleted!\";\n          this.board = {\n            name: \"\",\n            mondayID: \"\",\n            updateColID: \"\",\n            allyID: \"\",\n            endDate: \"\",\n          };\n        } else {\n          this.deleteMessage = `Failed: ${JSON.stringify(result.result)}`;\n        }\n      }\n    },\n\n    async postData(url, data, contentType = \"application/json\") {\n      return fetch(url, {\n        method: \"POST\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        connection: \"keep-alive\",\n        headers: {\n          Accept: \"application.json\",\n          \"Content-Type\": contentType,\n        },\n        body: JSON.stringify(data),\n      })\n        .then((res) => {\n          return res.json();\n        })\n        .then((obj) => {\n          return obj;\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.back-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  left: 20px; /* Adjust the right distance as needed */\n}\n\nform {\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f4f4f4;\n  border-radius: 8px;\n}\n\n/* Style form labels */\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n}\n\n/* Style form inputs */\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-bottom: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n/* Style the submit button */\n.submit-button {\n  background-color: #3498db;\n  color: #fff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.delete-button {\n  background-color: darkred;\n  color: #fff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.right {\n  right: 30px;\n  position: absolute;\n}\n\n/* Style the submit button on hover */\n.submit-button:hover {\n  background-color: #267bb5;\n}\n</style>\n","\n<script setup>\n\ndefineProps({\n  details: Object,\n});\n\n</script>\n\n<template>\n\n  <div v-if=\"!details.message.rowIssue\" :class=\"getColor(details.type)\">\n    <h3>{{formatType(details.type)}} - {{new Date(details.dateTime).toLocaleDateString()}} {{new Date(details.dateTime).toLocaleTimeString()}}</h3>\n    <p>Monday Board ID: {{details.boardId}}</p>\n    <p>Details: {{details.message}}</p>\n  </div>\n\n  <div v-else :class=\"getColor(details.type)\">\n    <h3>{{formatType(details.type)}} - {{new Date(details.dateTime).toLocaleDateString()}} {{new Date(details.dateTime).toLocaleTimeString()}}</h3>\n    <p>Monday Board ID: {{details.boardId}}</p>\n    <p>Details:</p>\n    <p v-if=\"details.message.failedToAdd\">{{details.message.failedToAdd.slice(0, -2)}}</p>\n    <p v-if=\"details.message.failedToUpdate\">{{details.message.failedToUpdate.slice(0, -2)}}</p>\n\n    <div v-if=\"details.message.failedToAddDetails.length > 0\" class=\"collapse-box\">\n      <button @click=\"toggleCollapsible1\" class=\"collapsible-button\">Failed to Add - {{getWord(isCollapsibleOpen1)}} Full Details {{getDirection(isCollapsibleOpen1)}}</button>\n      <div v-if=\"isCollapsibleOpen1\" class=\"collapsible-content\">\n        <p>{{details.message.failedToAddDetails}}</p>\n      </div>\n    </div>\n\n    <div v-if=\"details.message.failedToUpdateDetails.length > 0\" class=\"collapse-box\">\n      <button @click=\"toggleCollapsible2\" class=\"collapsible-button\">Failed to Update - {{getWord(isCollapsibleOpen2)}} Full Details {{getDirection(isCollapsibleOpen2)}}</button>\n      <div v-if=\"isCollapsibleOpen2\" class=\"collapsible-content\">\n        <p>{{details.message.failedToUpdateDetails}}</p>\n      </div>\n    </div>\n\n  </div>\n\n</template>\n\n\n<script>\n\nexport default {\n\n  props: ['details'],\n\n  data() {\n    return {\n      isCollapsibleOpen1: false,\n      isCollapsibleOpen2: false,\n    }\n  },\n\n  methods: {\n    getColor(type) {\n      if (type === 'critical error') {\n        return 'issue red';\n      } else {\n        return 'issue yellow';\n      }\n    },\n    formatType(type) {\n      if (type === 'critical error') {\n        return 'Critical Error';\n      } else {\n        return 'Non-Critical Issue(s)';\n      }\n    },\n    getDirection(open) {\n      if (open) {\n        return '🔼';\n      } else {\n        return '🔽';\n      }\n    },\n    getWord(open) {\n      if (open) {\n        return 'Hide';\n      } else {\n        return 'View';\n      }\n    },\n    toggleCollapsible1() {\n      this.isCollapsibleOpen1 = !this.isCollapsibleOpen1;\n    },\n    toggleCollapsible2() {\n      this.isCollapsibleOpen2 = !this.isCollapsibleOpen2;\n    },\n  },\n\n}\n</script>\n\n\n<style>\n\n.collapse-box {\n}\n\n.collapsible-button {\n  width: 100%;\n  padding: 10px;\n  margin: 10px;\n  font-size: 16px;\n  border-radius: 10px;\n  border: #a19672 solid;\n  background: #f2ebd3;\n}\n\n.collapsible-content p {\n  padding: 10px;\n  margin-top: 10px;\n  display: block;\n  font-size: 10pt;\n}\n\n.issue {\n  color: black; /* Text color */\n  border-radius: 10px; /* Rounded corners */\n  padding: 20px; /* Padding for content inside the element */\n  margin: 10px; /* Margin to create an offset background effect */\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.1); /* Box shadow for depth */\n  position: relative;\n}\n\n.red {\n  background-color: #fcbbbb;\n  border: 2px solid #D04848;\n}\n\n.yellow {\n  background-color: #fff1c2;\n  border: 2px solid #FFD23F;\n}\n\nh3 {\n  font-size: 20pt;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n\n</style>\n","<template>\n  <h1>Issues</h1>\n  <Button class=\"issue-button\" text=\"Home\" @goToLink=\"leave\" />\n\n  <div v-for=\"issue in issues\">\n    <Issue :details=\"issue\" />\n  </div>\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport Issue from \"../components/Issue.vue\";\nimport { SERVER_URL } from \"../constants.js\";\n\nexport default {\n  components: {\n    Button,\n    Issue,\n  },\n\n  data() {\n    return {\n      issues: [],\n    };\n  },\n\n  async created() {\n    const resp = await fetch(`${SERVER_URL}get-issues`);\n    const body = await resp.json();\n    console.log(body);\n\n    this.issues = body;\n  },\n\n  methods: {\n    leave() {\n      this.$router.push({ path: \"/\" });\n    },\n  },\n};\n</script>\n\n<style>\n.issue-button {\n  position: fixed;\n  top: 10px; /* Adjust the top distance as needed */\n  left: 20px; /* Adjust the right distance as needed */\n}\n</style>\n"],"names":[],"version":3,"file":"index.c41b5a0e.css.map","sourceRoot":"/__parcel_source_root/"}